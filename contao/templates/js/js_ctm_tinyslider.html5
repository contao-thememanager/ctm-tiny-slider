<?php
    $GLOBALS['TL_CSS'][] = 'bundles/contaothememanagertinyslider/framework/assets/tiny-slider/tiny-slider.css|static';
    $GLOBALS['TL_JAVASCRIPT'][] = 'bundles/contaothememanagertinyslider/framework/assets/tiny-slider/tiny-slider.js|static';
?>

<script>
    var extend = function () {
        // Variables
        var extended = {};
        var deep = false;
        var i = 0;
        var length = arguments.length;

        // Check if a deep merge
        if ( Object.prototype.toString.call( arguments[0] ) === '[object Boolean]' ) {
            deep = arguments[0];
            i++;
        }

        // Merge the object into the extended object
        var merge = function (obj) {
            for ( var prop in obj ) {
                if ( Object.prototype.hasOwnProperty.call( obj, prop ) ) {
                    // If deep merge and property is an object, merge properties
                    if ( deep && Object.prototype.toString.call(obj[prop]) === '[object Object]' ) {
                        extended[prop] = extend( true, extended[prop], obj[prop] );
                    } else {
                        extended[prop] = obj[prop];
                    }
                }
            }
        };

        // Loop through each object and conduct a merge
        for ( ; i < length; i++ ) {
            var obj = arguments[i];
            merge(obj);
        }

        return extended;
    };

    var parseJSON = function(strJson){
        try {
            var o = JSON.parse(strJson);

            if (o && typeof o === "object") {
                return o;
            }
        }
        catch (e) { }

        return false;
    };

    (function() {
        const tnsBreakpoints = {
            'slider':   0,
            'sliderXs': 600,
            'sliderS':  768,
            'sliderM':  1024,
            'sliderL':  1264,
            'sliderXl': 1920
        };

        let defaults = {
            controls: false,
            nav: false,
            mouseDrag: true,
            swipeAngle: 30,
            controlsPosition: 'bottom',
            navPosition: 'bottom',
            autoplayPosition: 'bottom',
            gutter: 0,
            preventScrollOnTouch: 'auto',
            controlsText: [
                '<span class="prev">prev</span>',
                '<span class="next">next</span>'
            ],
            autoplayText: [
                '<span class="start">start</span>',
                '<span class="stop">stop</span>'
            ]
        };

        let tnsSliders = document.querySelectorAll('.init-slider'), i=0;

        for (;i<tnsSliders.length; i++){

            let tnsSlider = tnsSliders[i].querySelector('.c_list, .c_slider');

            if (!tnsSlider)
            {
                continue;
            }

            let settings = {container: tnsSlider};
            let config = tnsSlider.dataset;

            // set preset
            if(config.hasOwnProperty('sliderConfig')){
                let jsonConfig = parseJSON(config.sliderConfig);

                if(jsonConfig && jsonConfig.hasOwnProperty('preset')){
                    let preset = parseJSON(jsonConfig['preset']);

                    if(preset){
                        defaults = extend(true, defaults, preset);
                    }
                }

                // delete from dataset
                delete config['sliderConfig'];
            }

            // build config object
            for(let k in config){

                if(tnsBreakpoints.hasOwnProperty(k)){

                    let data = JSON.parse(config[k]);

                    if(tnsBreakpoints[k] !== 0){
                        // if the slider is disabled, we do not need any further properties
                        if(data.hasOwnProperty('disable') && data.disable) {
                            data = {disable: true};
                        }

                        let objResponsive = {'responsive': {}};
                            objResponsive['responsive'][tnsBreakpoints[k]] = data;

                        settings = extend(true, settings, objResponsive);
                    }else{
                        settings = extend(true, settings, data);
                    }
                }
            }

            tnsSlider.tinySlider = tns(extend(true, defaults, settings));
        }
    })();
</script>
